Execute
Create a function called execute that receives a function as first argument and then all the other arguments
Return the result of the execution of the passed function with that arguments.

Instruments
Create a function called play_instrument which will receive an instance of an instrument and will print it's play() method.

Shapes
Create an abstract class Shape with abstract methods calculate_area and calculate_perimeter.
Create classes Circle (receives radius upon initialization) and Rectangle (receives height and width upon initialization) that implement those methods (returning the result).
The fields of Circle and Rectangle should be private.

ImageArea
Create a class called ImageArea which will store the width and the height of an image. Create a method called get_area() which will return the area of the image. We have to also implement all the magic methods for comparison of two image areas (>, >=, <, <=, ==, !=) which will compare their areas.

Vehicle
Create an abstract class called Vehicle that should have abstract methods drive and refuel. Create 2 vehicles that inherit the Vehicle class (a Car and a Truck) and simulates driving and refueling them. Car and Truck both have fuel_quantity, fuel_consumption in liters per km and can be driven a given distance: drive(distance) and refueled with a given amount of fuel: refuel(fuel). It is summer, so both vehicles use air conditioners and their fuel consumption per km when driving is increased by 0.9 liters for the car and with 1.6 liters for the truck. Also, the Truck has a tiny hole in its tank and when it's refueled it keeps only 95% of the given fuel. The car has no problems and adds all the given fuel to its tank. If a vehicle cannot travel the given distance, its fuel does not change.

Groups
Create a class called Person. Upon initialization it will receive a name (str) and a surname (str). Create another class called Group. Upon initialization it should receive a name (str) and people (list of Person instances). Implement the needed magic methods, so the test code below works.

Account
Create a single class called Account. Upon initialization, it should receive owner (str) and amount (int, optional, 0 by default). It should also have an attribute called _transactions (empty list upon initialization). Create the following methods:
•	add_transaction(amount) - if the amount is not an integer, raise ValueError with message "please use int for amount", otherwise, add the amount to the transactions
•	balance() - property that returns sum of the amount and all the transactions
•	validate_transaction(account: Account, amount_to_add) - if the transaction is possible, add it. If the balance becomes less than zero, raise ValueError with message "sorry cannot go in debt!" and break the transaction. Otherwise, complete it and return a message "New balance: {account_ballance}"
Implement the correct magic methods, so the code in the example bellow works properly.

Wild Farm
Your task is to create a class hierarchy like the described below. The Animal, Bird, Mammal and Food classes should be abstract:
In the food.py file implement the following classes:
•	Food - quantity (int) - abstract class
o	Vegetable
o	Fruit
o	Meat
o	Seed
In the animal.py file implement the Animal, Bird and Mammal classes. In the birds.py file implement the bird classes and in the mammals.py file implement the mammal classes
•	Animal - name (string), weight (float), food_eaten (attribute, 0 upon initialization) - abstract class
o	Bird - wing_size (float) - abstract class
	Owl
	Hen
o	Mammal - living_region (string) - abstract class
	Mouse
	Dog
	Cat
	Tiger
All animals should also have the ability to ask for food by producing a sound. make_sound() method that returns the sound:
•	Owl - "Hoot Hoot"
•	Hen - "Cluck"
•	Mouse - "Squeak"
•	Dog - "Woof!"
•	Cat - "Meow"
•	Tiger - "ROAR!!!"
Now use the classes that you have created to instantiate some animals and feed them. Add method feed(food) where the food will be instance of some of the food classes.
Animals will only eat a certain type of food, as follows:
•	Hens eat everything
•	Mice eat vegetables and fruits
•	Cats eat vegetables and meat
•	Tigers, Dogs and Owls eat only meat
If you try to give an animal a different type of food, it will not eat it and you should return:
•	"{AnimalType} does not eat {FoodType}!"
The weight of an animal will increase with every piece of food it eats, as follows:
•	Hen - 0.35
•	Owl - 0.25
•	Mouse - 0.10
•	Cat - 0.30
•	Dog - 0.40
•	Tiger - 1.00
Override the __repr__() method to print the information about an animal in the formats:
•	Birds - "{AnimalType} [{AnimalName}, {WingSize}, {AnimalWeight}, {FoodEaten}]"
•	Mammals - "{AnimalType} [{AnimalName}, {AnimalWeight}, {AnimalLivingRegion}, {FoodEaten}]"

Animals
Your task is to create a class hierarchy like the described below. 
The Animal class (abstract) should take, as attributes, a name, an age and a gender. It should have 2 methods: repr() and make_sound().
The Dog class should inherit and implement the Animal class. His repr should return "This is {name}. {name} is a {age} year old {gender} {class}". The make_sound() method should return "Woof!"
The Cat class should inherit and implement the Animal class. Her repr should return "This is {name}. {name} is a {age} year old {gender} {class}". The make_sound() method should return "Meow meow!"
The Kitten class should inherit and implement the Cat class. The kitten should not accept "gender" as a parameter, but it should have its value set to "Female".  The make_sound() method should return "Meow".
The Tomcat class should inherit and implement the Cat class. The tomcat should not accept "gender" as a parameter, but it should have its value set to "Male".  The make_sound() method should return "Hiss".
Submit in judge a zip file named project, containing a separate file for each of the classes.
