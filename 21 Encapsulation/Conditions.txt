Person
Create a class called Person. Upon initialization it should receive name and age. Create private name and age attributes (cannot be accessed outside the class). Create two instance methods called get_name and get_age to return the values of the private attributes.

Email Validator
Create a class called EmailValidator. Upon initialization it should receive min_length (of the username; example: in "peter@gmail.com" "peter" is the username), mails (list of the valid mails; example: "gmail", "abv"), domains (list of valid domains; example: "com", "net"). Create three private methods:
-	validate_name(name) - returns whether the name is greater than or equal to the min_length (True/False)
-	validate_mail(mail) - returns whether the mail is in the possible mails list (True/False)
-	validate_domain(domain) - returns whether the domain is in the possible domains list (True/False)
Create one public method:
-	validate(email) - using the three private methods returns whether the email is valid (True/False)

Mammal
Create a class called Mammal. Upon initialization it should receive a name, type and sound. Create private class attribute called kingdom and set it to be "animals". Create three more instance methods:
-	make_sound() - returns a string in the format "{name} makes {sound}"
-	get_kingdom() - returns the private kingdom attribute
-	info() - returns a string in the format "{name} is of type {type}"

Account
Create a class called Account. Upon initialization it should receive an id, balance and pin (all numbers). The pin and the id should be private instance attributes and the balance should be public attribute. Create two public instance methods:
-	get_id(pin) - if the given pin is correct, return the id, otherwise return "Wrong pin"
-	change_pin(old_pin, new_pin) - if the old pin is correct, change it to the new one and return "Pin changed", otherwise return "Wrong pin"

Wild Cat Zoo
Class Lion
Attributes
Public attribute name: string
Public attribute gender: string
Public attribute age: number
Methods
__init__(name, gender, age) - set all the attributes to the given ones
get_needs() - returns the number 50 (amount of money needed to tend the animal)
__repr__() - returns string representation of the lion in the format: "Name: {name}, Age: {age}, Gender: {gender}"
Class Tiger
Attributes
Public attribute name: string
Public attribute gender: string
Public attribute age: number
Methods
__init__(name, gender, age) - set all the attributes to the given ones
get_needs() - returns the number 45 (amount of money needed to tend the animal)
__repr__() - returns string representation of the tiger in the format: "Name: {name}, Age: {age}, Gender: {gender}"
Class Cheetah
Attributes
Public attribute name: string
Public attribute gender: string
Public attribute age: number
Methods
__init__(name, gender, age) - set all the attributes to the given ones
get_needs() - returns the number 60 (amount of money needed to tend the animal)
__repr__() - returns string representation of the cheetah in the format: "Name: {name}, Age: {age}, Gender: {gender}"
Class Keeper
Attributes
Public attribute name: string
Public attribute age: number
Public attribute salary: number
Methods
__init__(name, age, salary) - set all the attributes to the given ones
__repr__() - returns string representation of the keeper in the format: "Name: {name}, Age: {age}, Salary: {salary}"
Class Caretaker
Attributes
Public attribute name: string
Public attribute age: number
Public attribute salary: number
Methods
__init__(name, age, salary) - set all the attributes to the given ones
__repr__() - returns string representation of the caretaker in the format: "Name: {name}, Age: {age}, Salary: {salary}"
Class Vet
Attributes
Public attribute name: string
Public attribute age: number
Public attribute salary: number
Methods
__init__(name, age, salary) - set all the attributes to the given ones
__repr__() - returns string representation of the vet in the format: "Name: {name}, Age: {age}, Salary: {salary}"
Class Zoo
Attributes
Private attribute animal_capacity: number
Private attribute workers_capacity: number
Private attribute budget: number
Public attribute name: string
Public attribute animals: list (empty upon initialization)
Public attribute workers: list (empty upon initialization)
Methods
__init__(name, budget, animlal_capacity, workers_capacity) - set the attributes to the given ones
add_animal(animal, price)
-	If you have enough budget and capacity add the animal (instance of Lion/Tiger/Cheetah) to the animals list, reduce the budget and return "{name} the {type of animal (Lion/Tiger/Cheetah)} added to the zoo"
-	If you have capacity, but no budget, return "Not enough budget"
-	In any other case, you don't have space and you should return "Not enough space for animal"
hire_worker(worker)
-	If you have enough space for the worker (instance of Keeper/Caretaker/Vet), add him to the workers and return "{name} the {type(Keeper/Vet/Caretaker)} hired successfully"
-	Otherwise return "Not enough space for worker"
fire_worker(worker_name)
-	If there is a worker with that name in the workers list, remove him and return "{worker_name} fired successfully"
-	Otherwise return "There is no {worker_name} in the zoo"
pay_workers()
-	If you have enough budget to pay the workers (sum their salaries) pay them and return "You payed your workers. They are happy. Budget left: {left_budget}"
-	Otherwise return "You have no budget to pay your workers. They are unhappy"
tend_animals()
-	If you have enough budget to tend the animals reduce the budget and return "You tended all the animals. They are happy. Budget left: {left_budget}"
-	Otherwise return "You have no budget to tend the animals. They are unhappy."
profit(amount)
-	Increase the budget with the given amount of profit
animals_status()
-	Returns the following string:
You have {total_animals_count} animals
----- {amount_of_lions} Lions:
{lion1}
…
----- {amount_of_tigers} Tigers:
{tiger1}
…
----- {amount_of_cheetahs} Cheetahs:
{cheetah1}
…
-	Hint: use the __repr__ methods of the animals to print them on the console
workers_status()
-	Returns the following string:
You have {total_workers_count} workers
----- {amount_of_keepers} Keepers:
{keeper1}
…
----- {amount_of_caretakers} Caretakers:
{caretaker1}
…
----- {amount_of_vetes} Vets:
{vet1}
…
-	Hint: use the __repr__ methods of the workers to print them on the console

Pizza Calories
Class Topping
Attributes
Private attribute topping_type: string
Private attribute weight: float
Methods
__init__( topping_type, weight) - set all the attributes to the given ones
Getters and Setters to all of the private attributes
Class Dough
Attributes
Private attribute flour_type: string
Private attribute baking_technique: string
Private attribute weight: float
Methods
__init__(flour_type, baking_technique, weight) - set all the attributes to the given ones
Getters and Setters to all of the private attributes

Class Pizza
Attributes
Private attribute name: string
Private attribute dough: Dough
Private attribute toppings: dictionary
Private attribute toppings_capacity: number

Methods
__init__(name, dough, toppings_capacity) - set all the attributes to the given ones. Also, initialize an empty toppings dictionary. It will contain the topping type as a key and the topping's weight as a value.
Getters and Setters to all of the private attributes
add_topping(topping: Topping) - Adds a new topping to the dictionary.
•	If there is no space left for a new topping, raise a ValueError: "Not enough space for another topping"
•	If the topping is already in the dictionary, increase the value of its weight.
calculate_total_weight() - returns the total weight of the pizza.

Football Team Generator
Class Player
Attributes
Private attribute name: string
Private attribute endurance: number
Private attribute sprint: number
Private attribute dribble: number
Private attribute passing: number
Private attribute shooting: number

Methods
__init__(name, endurance, sprint, dribble, passing, shooting) - set all the attributes to the given ones.
Getters and Setters to all of the private attributes
__str__() - should return: 
"Player: {name}
Endurance: {endurance}
Sprint: {sprint}
Dribble: {dribble}
Passing: {passing}
Shooting: {shooting}
"
Note: There is a new line at the end of the __str__()!!!
Class Team
Attributes
Private attribute name: string
Private attribute rating: number
Private attribute players: list
Methods
__init__( name, rating) - set all the attributes to the given ones. Also, initialize a new collection, containing all of the players.
Getters and Setters to all of the private attributes
add_player(player: Player) - adds a new player to the team.
•	If the player is already in the team, return "Player {name} has already joined"
•	Add the player to the team and return "Player {name} joined team {team_name}"
remove_player(player_name: str) - removes a player by its given name
•	Remove the player and return him
•	If the player is not in the team, return "Player {player_name} not found"
